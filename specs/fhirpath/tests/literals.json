{
  "name": "testLiterals",
  "description": "testLiterals",
  "source": "fhirpath-lab",
  "tests": [
    {
      "name": "testLiteralTrue",
      "expression": "Patient.name.exists() = true",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralFalse",
      "expression": "Patient.name.empty() = false",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralString1",
      "expression": "Patient.name.given.first() = 'Peter'",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralInteger1",
      "expression": "1.convertsToInteger()",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralInteger0",
      "expression": "0.convertsToInteger()",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralIntegerNegative1",
      "expression": "(-1).convertsToInteger()",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralIntegerNegative1Invalid",
      "expression": "-1.convertsToInteger()",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": []
    },
    {
      "name": "testLiteralIntegerMax",
      "expression": "2147483647.convertsToInteger()",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralString2",
      "expression": "'test'.convertsToString()",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralStringEscapes",
      "expression": "'\\\\\\/\\f\\r\\n\\t\\\"\\`\\'\\u002a'.convertsToString()",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralBooleanTrue",
      "expression": "true.convertsToBoolean()",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralBooleanFalse",
      "expression": "false.convertsToBoolean()",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralDecimal10",
      "expression": "1.0.convertsToDecimal()",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralDecimal01",
      "expression": "0.1.convertsToDecimal()",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralDecimal00",
      "expression": "0.0.convertsToDecimal()",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralDecimalNegative01",
      "expression": "(-0.1).convertsToDecimal()",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralDecimalNegative01Invalid",
      "expression": "-0.1.convertsToDecimal()",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": []
    },
    {
      "name": "testLiteralDecimalMax",
      "expression": "1234567890987654321.0.convertsToDecimal()",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralDecimalStep",
      "expression": "0.00000001.convertsToDecimal()",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralDateYear",
      "expression": "@2015.is(Date)",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralDateMonth",
      "expression": "@2015-02.is(Date)",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralDateDay",
      "expression": "@2015-02-04.is(Date)",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralDateTimeYear",
      "expression": "@2015T.is(DateTime)",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralDateTimeMonth",
      "expression": "@2015-02T.is(DateTime)",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralDateTimeDay",
      "expression": "@2015-02-04T.is(DateTime)",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralDateTimeHour",
      "expression": "@2015-02-04T14.is(DateTime)",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralDateTimeMinute",
      "expression": "@2015-02-04T14:34.is(DateTime)",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralDateTimeSecond",
      "expression": "@2015-02-04T14:34:28.is(DateTime)",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralDateTimeMillisecond",
      "expression": "@2015-02-04T14:34:28.123.is(DateTime)",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralDateTimeUTC",
      "expression": "@2015-02-04T14:34:28Z.is(DateTime)",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralDateTimeTimezoneOffset",
      "expression": "@2015-02-04T14:34:28+10:00.is(DateTime)",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralTimeHour",
      "expression": "@T14.is(Time)",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralTimeMinute",
      "expression": "@T14:34.is(Time)",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralTimeSecond",
      "expression": "@T14:34:28.is(Time)",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralTimeMillisecond",
      "expression": "@T14:34:28.123.is(Time)",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralTimeUTC",
      "expression": "@T14:34:28Z.is(Time)",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": []
    },
    {
      "name": "testLiteralTimeTimezoneOffset",
      "expression": "@T14:34:28+10:00.is(Time)",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": []
    },
    {
      "name": "testLiteralQuantityDecimal",
      "expression": "10.1 'mg'.convertsToQuantity()",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralQuantityInteger",
      "expression": "10 'mg'.convertsToQuantity()",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralQuantityDay",
      "expression": "4 days.convertsToQuantity()",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralIntegerNotEqual",
      "expression": "-3 != 3",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralIntegerEqual",
      "expression": "Patient.name.given.count() = 5",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testPolarityPrecedence",
      "expression": "-Patient.name.given.count() = -5",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralIntegerGreaterThan",
      "expression": "Patient.name.given.count() > -3",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralIntegerCountNotEqual",
      "expression": "Patient.name.given.count() != 0",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralIntegerLessThanTrue",
      "expression": "1 < 2",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralIntegerLessThanFalse",
      "expression": "1 < -2",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        false
      ]
    },
    {
      "name": "testLiteralIntegerLessThanPolarityTrue",
      "expression": "+1 < +2",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralIntegerLessThanPolarityFalse",
      "expression": "-1 < 2",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralDecimalGreaterThanNonZeroTrue",
      "expression": "Observation.value.value > 180.0",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "observation-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralDecimalGreaterThanZeroTrue",
      "expression": "Observation.value.value > 0.0",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "observation-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralDecimalGreaterThanIntegerTrue",
      "expression": "Observation.value.value > 0",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "observation-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralDecimalLessThanInteger",
      "expression": "Observation.value.value < 190",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "observation-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralDecimalLessThanInvalid",
      "expression": "Observation.value.value < 'test'",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "observation-example.json",
      "expected": []
    },
    {
      "name": "testDateEqual",
      "expression": "Patient.birthDate = @1974-12-25",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testDateNotEqual",
      "expression": "Patient.birthDate != @1974-12-25T12:34:00",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": []
    },
    {
      "name": "testDateNotEqualTimezoneOffsetBefore",
      "expression": "Patient.birthDate != @1974-12-25T12:34:00-10:00",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": []
    },
    {
      "name": "testDateNotEqualTimezoneOffsetAfter",
      "expression": "Patient.birthDate != @1974-12-25T12:34:00+10:00",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": []
    },
    {
      "name": "testDateNotEqualUTC",
      "expression": "Patient.birthDate != @1974-12-25T12:34:00Z",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": []
    },
    {
      "name": "testDateNotEqualTimeSecond",
      "expression": "Patient.birthDate != @T12:14:15",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testDateNotEqualTimeMinute",
      "expression": "Patient.birthDate != @T12:14",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testDateNotEqualToday",
      "expression": "Patient.birthDate < today()",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testDateTimeGreaterThanDate1",
      "expression": "now() > Patient.birthDate",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testDateGreaterThanDate",
      "expression": "today() > Patient.birthDate",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testDateTimeGreaterThanDate2",
      "expression": "now() > today()",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": []
    },
    {
      "name": "testLiteralDateTimeTZGreater",
      "expression": "@2017-11-05T01:30:00.0-04:00 > @2017-11-05T01:15:00.0-05:00",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        false
      ]
    },
    {
      "name": "testLiteralDateTimeTZLess",
      "expression": "@2017-11-05T01:30:00.0-04:00 < @2017-11-05T01:15:00.0-05:00",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralDateTimeTZEqualFalse",
      "expression": "@2017-11-05T01:30:00.0-04:00 = @2017-11-05T01:15:00.0-05:00",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        false
      ]
    },
    {
      "name": "testLiteralDateTimeTZEqualTrue",
      "expression": "@2017-11-05T01:30:00.0-04:00 = @2017-11-05T00:30:00.0-05:00",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralUnicode",
      "expression": "Patient.name.given.first() = 'P\\u0065ter'",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testCollectionNotEmpty",
      "expression": "Patient.name.given.empty().not()",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testCollectionNotEqualEmpty",
      "expression": "Patient.name.given != {}",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": []
    },
    {
      "name": "testExpressions",
      "expression": "Patient.name.select(given | family).distinct()",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals",
        "function:select",
        "filtering"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        "Peter",
        "James",
        "Chalmers",
        "Jim",
        "Windsor"
      ]
    },
    {
      "name": "testExpressionsEqual",
      "expression": "Patient.name.given.count() = 1 + 4",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testNotEmpty",
      "expression": "Patient.name.empty().not()",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testEmpty",
      "expression": "Patient.link.empty()",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralNotOnEmpty",
      "expression": "{}.not().empty()",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralNotTrue",
      "expression": "true.not() = false",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testLiteralNotFalse",
      "expression": "false.not() = true",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testIntegerBooleanNotTrue",
      "expression": "(0).not() = false",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testIntegerBooleanNotFalse",
      "expression": "(1).not() = false",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": [
        true
      ]
    },
    {
      "name": "testNotInvalid",
      "expression": "(1|2).not() = false",
      "input": null,
      "tags": [
        "fhirpath-lab",
        "testLiterals"
      ],
      "inputfile": "patient-example.json",
      "expected": []
    }
  ]
}